/* eslint-env node */
/* eslint-env mocha */

'use strict'

process.env.NODE_ENV = 'test'

var createServer = require('../../bin/server.js')
var Browser = require('zombie')
// Browser.debug = true
Browser.silent = true

describe('todo app', function() {

  var LIST1 = '#list1'
  var LIST2 = '#list2'
  var LIST1_LAST_SPAN = LIST1 + ' li:last-child span'
  var LIST2_LAST_SPAN = LIST2 + ' li:last-child span'

  // Tests for multiple todo items are dynamically generated by iterating over the TODOS array.
  var TODOS = [1, 2, 3]


  /* Utility functions */
  function assertSuccess() {
    this.browser.assert.success()
  }

  function assertTodoCount(context, count) {
    context.browser.assert.elements(LIST1 + ' li', count)
    context.browser.assert.elements(LIST2 + ' li', count)
  }

  function assertTodoText(context, text) {
    context.browser.assert.text(LIST1_LAST_SPAN, text)
    context.browser.assert.text(LIST2_LAST_SPAN, text)
  }

  function assertTodoStyle(context, style) {
    context.browser.assert.style(LIST1_LAST_SPAN, 'text-decoration', style)
    context.browser.assert.style(LIST2_LAST_SPAN, 'text-decoration', style)
  }

  function assertTodoStrikeThrough(completed) {
    var style = completed ? 'line-through' : ''

    it('should style the todo text ' + (completed ? 'with' : 'without') + ' strike-through', function() {
      assertTodoStyle(this, style)
    })
  }

  /* Tests */
  before(function() {
    this.server = createServer('../build/').listen(3000)
    this.browser = new Browser({site: 'http://localhost:3000'})
  })

  after(function(done) {
    this.server.close(done)
  })

  describe('visit home page', function() {
    before(function(done) {
      this.browser.visit('/', done)
    })

    it('should be successful', assertSuccess)

    it('should display page heading', function() {
      this.browser.assert.text('h3', 'Todos')
    })

    it('should have no todo items', function() {
      assertTodoCount(this, 0)
    })
  })

  TODOS.forEach(function(n) {
    describe('adding todo ' + n, function() {

      var text = 'todo' + n

      before(function(done) {
        this.browser
          .fill('form input[type=text]', text)
          .pressButton('Add Todo', done)
      })

      it('should be successful', assertSuccess)

      it('should add one todo', function() {
        assertTodoCount(this, n)
      })

      it('should append the new todo to the end of the list', function() {
        assertTodoText(this, text)
      })

      assertTodoStrikeThrough(false)

    })

    // Click the last (most recently added) todo item 3 times and check the text style toggles.
    var completed_values = [false, true, false]
    completed_values.forEach(function(completed) {

      describe('clicking on a ' + (completed ? 'done' : 'pending') + ' todo', function() {

        before(function(done) {
          this.browser.fire(LIST1_LAST_SPAN, 'click', done)
        })

        it('should be successful', assertSuccess)
        assertTodoStrikeThrough(!completed)
      })

    })

  })

  // We arrive here with all the todos marked as done.
  describe('deleting all todos', function() {

    before(function(done) {
      assertTodoCount(this, TODOS.length)
      this.browser.pressButton('Clear Completed', done)
    })

    it('should be successful', assertSuccess)

    it('should remove all todos', function() {
      assertTodoCount(this, 0)
    })

  })

})
